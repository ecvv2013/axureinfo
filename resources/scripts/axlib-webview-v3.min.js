! function()
{
    let axlibPath = getDeploy(
        {
            gval: "AxLib",
            defaultUrl: "https://ax.minicg.com/axlib-v3.min.js"
        }),
        axloaderPath = getDeploy(
        {
            gval: "AxLoader",
            defaultUrl: "https://ax.minicg.com/axloader.js"
        });

    function main()
    {
        window.AxWebview || (window.AxWebview = {
            name: "axwebview",
            version: "3.2.2",
            elements: []
        }, window.yepnope ? inited() : loadJS(axloaderPath, inited))
    }

    function inited()
    {
        let preload = [axlibPath],
            webviews = $(".ax-webview");
        $.each(webviews, (i, k) =>
        {
            let files = preload,
                dPanel = $(k).parents(".panel_state").parent(),
                pid = dPanel.attr("id"),
                html = dPanel.children(".panel_state").find(".ax-html").find("textarea").val(),
                css = dPanel.children(".panel_state").find(".ax-css").find("textarea").val(),
                js = dPanel.children(".panel_state").find(".ax-javascript").find("textarea").val(),
                fileList = dPanel.children(".panel_state").find(".ax-files").find("select option"),
                vid = $(k).attr("id");
            hideViewChildren(vid), addLoadingSvg(k), $.each(fileList, (m, n) =>
            {
                var url = $(n).val(),
                    checked;
                "selected" === $(n).attr("selected") && files.push(url)
            }), html = formatHTML(html), css = formatCSS(css), js = formatCSS(js);
            let modules = getModuleNames(js);
            const INJECT_CODE = `let THIS = { dpanel: $axure('#${pid}'), view: $axure('#${vid}'), resetView: function(alpha,mouse){ $('#${vid}_div, #${vid}_text').show().css({'opacity':alpha,'pointer-events':mouse?'auto':'none'}); }, files:["${files.join('","')}"] };\n\n`;
            js = INJECT_CODE + getModuleCodes(modules) + "\n" + js, js = `;(function(){\n${js}\n}());`, $("head").append(`<style type="text/css">${css}</style>`), AxWebview.elements.push(
            {
                dPanel: $axure(`#${pid}`),
                view: $axure(`#${vid}`),
                html: html,
                css: css,
                js: js,
                files: files
            }), yepnope(
            {
                load: files,
                complete: () =>
                {
                    $(k).append(html), $(k).append(`<script type="text/javascript">${js}<\/script>`), $(k).find(".ax-loading").remove()
                }
            })
        })
    }

    function getHostPath()
    {
        let path = window.location.href,
            arr = path.split("/");
        return arr.pop(), path = arr.join("/"), path
    }

    function getDeploy(params)
    {
        let
        {
            gval: gval,
            defaultUrl: defaultUrl
        } = params, deploy = "";
        return $axure.internal($ax =>
        {
            deploy = $ax.globalVariableProvider.getVariableValue(gval)
        }), "" === deploy && (deploy = defaultUrl), deploy.indexOf("{host}") > -1 && (deploy = deploy.replace("{host}", getHostPath())), deploy
    }

    function formatHTML(code)
    {
        return code.replace(/聽/gi, "")
    }

    function formatCSS(code)
    {
        return code.replace(/聽/gi, "")
    }

    function loadJS(url, callback)
    {
        var s = document.createElement("script");
        s.onload = callback || function()
        {
            console.log(url + " loaded.")
        }, s.setAttribute("src", url), document.querySelector("head").appendChild(s)
    }

    function addLoadingSvg(target, options)
    {
        let svg = `\n            <svg xmlns="http://www.w3.org/2000/svg" width="38" height="38" viewBox="0 0 38 38" stroke="${(options=options||{color:"#fff",opacity:.2,scale:1.2,delay:0,dur:1,blending:"difference"}).color}" style="transform:scale(${options.scale});">\n                <g fill="none" fill-rule="evenodd">\n                    <g transform="translate(1 1)" stroke-width="2">\n                        <circle stroke-opacity="${options.opacity}" cx="18" cy="18" r="18"/>\n                        <path d="M36 18c0-9.94-8.06-18-18-18">\n                            <animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="${options.dur}s" repeatCount="indefinite"/>\n                        </path>\n                    </g>\n                </g>\n            </svg>\n        `;
        return $("head").append(`\n            <style>\n                html, body { height: 100%; }\n                .ax-loading { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: transparent; z-index: 9999; mix-blend-mode:${options.blending}; pointer-events:none; }\n                .ax-loading-svg { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }\n            </style>\n        `), $(target).append(`<div class="ax-loading"><div class="ax-loading-svg">${svg}</div></div>`), svg
    }

    function getModuleNames(code, prefix)
    {
        prefix = prefix || "include";
        let arr = [],
            lines = code.split("\n");
        lines = lines.filter(Boolean);
        let keyword = `//@${prefix} `,
            regx = new RegExp(keyword);
        for (let i = 0; i < lines.length; i++)
        {
            let line = lines[i] || "";
            if (-1 == line.indexOf(keyword)) continue;
            let name = line.replace(regx, "").replace(/;/, "").replace(/'/g, "");
            arr.push(name)
        }
        return arr
    }

    function getModuleCodes(modules)
    {
        let codes = [];
        for (let i = 0; i < modules.length; i++)
        {
            let name = modules[i],
                code = "",
                target = $axure(`@${name}`).$().find("textarea");
            0 !== target.length && (code = target.val()), codes.push(code + "\n")
        }
        return codes.join("\n")
    }

    function hideViewChildren(vid)
    {
        let viewColorId, viewColorEl = $("#" + (vid + "_div")),
            viewTextId, viewTextEl = $("#" + (vid + "_text")),
            viewTextHTML; - 1 == viewTextEl.html().indexOf("<span>") && viewTextEl.html("<p><span>&nbsp;</span></p>"), viewColorEl.css("visibility", "visible"), viewTextEl.css("visibility", "visible"), viewColorEl.hide(), viewTextEl.hide()
    }
    main()
}();
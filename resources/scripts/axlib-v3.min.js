! function()
{
    function main()
    {
        $axure && $ ? (Utils(), InitAxlib(), window.AXLIB = window.axlib = {
            useLoader: useLoader,
            layout: layout,
            trace: trace,
            jsonbin: jsonbin,
            hosting: hosting,
            loading: loading,
            find: find,
            setGlobalVar: $axure.setGlobalVariable,
            getGlobalVar: $axure.getGlobalVariable,
            version:
            {
                name: "axlib",
                version: "3.1.0"
            }
        }) : trace("请先加载 $axure 和 jquery！")
    }

    function InitAxlib()
    {
        $axure.ex = {
            fn:
            {}
        }, $axure.internal((function($ax)
        {
            $axure.ex.refreshRepeater = $ax.repeater.refreshRepeater, $ax.public.fn.refreshRepeater = function()
            {
                return $axure.ex.refreshRepeater(this.getElementIds()[0]), this
            }, $axure.ex.getRepeaterRows = $ax.repeater.getAllItemIds, $ax.public.fn.getRepeaterRows = function()
            {
                return $axure.ex.getRepeaterRows(this.getElementIds()[0])
            }, $axure.ex.getRepeater = function(elementId)
            {
                let repeater;
                return $axure((function(obj)
                {
                    return "repeater" == obj.type
                })).each((function(obj, id)
                {
                    id == elementId && (repeater = obj)
                })), repeater
            }, $axure.ex.formatRepeaterData = function(data, options)
            {
                let newData, format = (options = options ||
                {
                    format: "auto",
                    key: void 0
                }).format.toLowerCase();
                if ("default" === format || "auto" === format)
                {
                    let arr = [];
                    for (let i = 0; i < data.length; i++)
                    {
                        let item = data[i],
                            obj = {};
                        for (let k in item) obj[k] = item[k].text;
                        arr.push(obj)
                    }
                    newData = arr
                }
                else if ("row" === format)
                {
                    let result = {};
                    for (let i = 0; i < data.length; i++)
                    {
                        let item = data[i],
                            obj = {},
                            key = Object.values(item)[0].text,
                            val = [];
                        for (let k in item)
                        {
                            let sub = item[k];
                            sub.text != key && val.push(sub.text)
                        }
                        obj[key] = val, $.extend(result, obj)
                    }
                    newData = result
                }
                else if ("column" === format || "col" === format)
                {
                    let obj = {};
                    for (let i = 0; i < data.length; i++)
                    {
                        let item = data[i];
                        for (k in item) obj[k] ? obj[k].push(item[k].text) : obj[k] = [item[k].text]
                    }
                    newData = obj
                }
                else if ("key" === format)
                    if (options.key)
                    {
                        let result = {},
                            pKey = options.key;
                        for (let i = 0; i < data.length; i++)
                        {
                            let item = data[i],
                                key = item[pKey].text,
                                val = [],
                                obj = {};
                            for (let k in item) k != pKey && val.push(item[k].text);
                            obj[key] = val, $.extend(result, obj)
                        }
                        newData = result
                    }
                    else console.log("未提供Key名，将不会进行格式化..."), newData = data;
                else if ("tree" === format)
                {
                    let arr = [];
                    for (let i = 0; i < data.length; i++)
                    {
                        let item = data[i],
                            obj = {};
                        for (let k in item) obj[k] = item[k].text;
                        arr.push(obj)
                    }
                    newData = tree(arr)
                }
                else trace(`未注册的格式化参数: ${format}，请使用此定义 { format: 'auto' || 'row' || 'column' || 'tree' || 'key' } ，其中 key 模式需额外提供索引键列名称.`), newData = data;
                return newData
            }, $axure.ex.getRepeaterData = function(elementId)
            {
                let ids = $ax.repeater.getAllItemIds(elementId),
                    columns = $axure.ex.getRepeater(elementId).dataProps;
                rows = [];
                for (let i = 0, il = ids.length; i < il; i++)
                {
                    let row = {};
                    for (let j = 0, jl = columns.length; j < jl; j++)
                    {
                        let name = columns[j].toLowerCase(),
                            id = ids[i];
                        "string" == typeof id && -1 != id.indexOf("-") && (id = $ax.repeater.getItemIdFromElementId(id));
                        let value = $ax.repeater.getData(
                        {}, elementId, ids[i], name, "data");
                        "object" == typeof value ? (value = $ax.deepCopy(value), void 0 === value.type && (value.type = "text"), row[name] = value) : row[name] = {
                            type: "text",
                            text: value
                        }
                    }
                    rows.push(row)
                }
                return rows
            }, $ax.public.fn.getRepeaterData = function(options)
            {
                let elementId = this.getElementIds()[0],
                    data = $axure.ex.getRepeaterData(elementId);
                return data = $axure.ex.formatRepeaterData(data, options), data
            }, $axure.ex.getRepeaterInitedData = function(elementId)
            {
                try
                {
                    let result;
                    return window.$axure(elementId => "repeater" === elementId.type).each((function(n, i)
                    {
                        elementId === i && (result = n)
                    })), result.data
                }
                catch (err)
                {
                    return console.error("Error：Can not get repeater data by id " + err)
                }
            }, $ax.public.fn.getRepeaterInitedData = function(options)
            {
                let elementId = this.getElementIds()[0],
                    data = $axure.ex.getRepeaterInitedData(elementId);
                return data = $axure.ex.formatRepeaterData(data, options), data
            }, $axure.ex.addRepeaterData = function(elementId, rows)
            {
                let event = {
                        targetElement: void 0,
                        srcElement: void 0
                    },
                    repeater, columns = $axure.ex.getRepeater(elementId).dataProps,
                    itemDefaultValue = {
                        type: "text",
                        text: ""
                    };
                for (let i = 0, ilen = rows.length; i < ilen; i++)
                {
                    let source = rows[i],
                        target = {};
                    for (let j = 0, jlen = columns.length; j < jlen; j++)
                    {
                        let column = columns[j],
                            item = source[column];
                        item = void 0 === item ? itemDefaultValue : item.hasOwnProperty("type") || item.hasOwnProperty("text") ? $ax.deepCopy(item) :
                        {
                            type: "text",
                            text: item
                        }, target[column] = item
                    }
                    $ax.repeater.addItem(elementId, target, event)
                }
            }, $ax.public.fn.addRepeaterData = function(rows)
            {
                let elementId = this.getElementIds()[0];
                return $axure.ex.addRepeaterData(elementId, rows), $axure.ex.refreshRepeater(elementId), this
            }, $ax.public.fn.removeRepeaterData = function(rowsCount)
            {
                rowsCount = rowsCount || 1;
                let data = this.getRepeaterData(),
                    newData = data.slice(0, data.length - rowsCount),
                    elementId = this.getElementIds()[0];
                return $axure.ex.clearRepeaterData(elementId), $axure.ex.addRepeaterData(elementId, newData), $axure.ex.refreshRepeater(elementId), this
            }, $ax.public.fn.setRepeaterData = function(rows)
            {
                let elementId = this.getElementIds()[0];
                return $axure.ex.clearRepeaterData(elementId), $axure.ex.addRepeaterData(elementId, rows), $axure.ex.refreshRepeater(elementId), this
            }, $axure.ex.clearRepeaterData = function(elementId)
            {
                let ids = $axure.ex.getRepeaterRows(elementId);
                $ax.repeater.addEditItems(elementId, ids), $ax.repeater.deleteItems(elementId,
                {}, "marked", void 0)
            }, $ax.public.fn.clearRepeaterData = function()
            {
                let elementId = this.getElementIds()[0];
                return $axure.ex.clearRepeaterData(elementId), $axure.ex.refreshRepeater(elementId), this
            }, $axure.ex.getPanelStates = function(elementId)
            {
                let result = [];
                for (let index = 1;; index++)
                {
                    let element = $("#" + elementId + "_state" + (index - 1));
                    if (!element.length) break;
                    let name = element.attr("data-label");
                    result[index] = name, result[name] = index
                }
                return result
            }, $ax.public.fn.getPanelStates = function()
            {
                return $axure.ex.getPanelStates(this.getElementIds()[0]), this
            }, $axure.ex.setPanelStateByName = function(elementId, stateName, options, showWhenSet)
            {
                let states = $axure.ex.getPanelStates(elementId);
                for (let k = 0; k < states.length; k++)
                    if (states[k] == stateName)
                    {
                        let stateNum = k;
                        $axure("#" + elementId).SetPanelState(stateNum, options ||
                        {}, showWhenSet || !1)
                    }
            }, $ax.public.fn.setPanelStateByName = function(stateName, options, showWhenSet)
            {
                let elementId = this.getElementIds()[0];
                return $axure.ex.setPanelStateByName(elementId, stateName, options, showWhenSet), this
            }, $ax.public.fn.getId = function()
            {
                return this.getElementIds()[0]
            }, $ax.public.fn.getEl = function()
            {
                return this.getElements()[0]
            }, $axure.find = find, $ax.public.getGlobalVariable = $ax.getGlobalVariable = function(name)
            {
                return $ax.globalVariableProvider.getVariableValue(name)
            }, $ax.public.fn.buttonMode = function(flag)
            {
                this.$().css("cursor", flag ? "pointer" : "default")
            }, $ax.public.fn.ghostMode = function(flag)
            {
                this.$().css("pointer-events", flag ? "none" : "auto")
            }, $axure.ex.redirectAfterUnmounted = !0, $axure.ex.beforeUnmountFn = function() {}, $axure.beforeUnmount = function(callback, redirect)
            {
                $axure.ex.redirectAfterUnmounted = redirect || !1, $axure.ex.beforeUnmountFn = callback
            }, $axure.ex.navigate = $ax.public.navigate, $axure.openURL = function(options)
            {
                options.url && ("frame" === options.target && (options.frame = $(frame).children("iframe").get(0)), $axure.ex.beforeUnmountFn(options), $axure.ex.redirectAfterUnmounted && $axure.ex.navigate(options))
            }
        }))
    }

    function Utils()
    {
        Object.defineProperty(String.prototype, "minify",
        {
            enumerable: !1,
            configurable: !0,
            value: function()
            {
                return this.replace(/ *[\r|\n] */gm, "")
            }
        }), $.isJSON = function(str)
        {
            try
            {
                if ("object" == typeof JSON.parse(str)) return !0
            }
            catch (e)
            {}
            return !1
        }, $.fn.extend(
        {
            hasAttr: function(name)
            {
                let _attr = $(this).attr(name);
                return void 0 !== _attr && !1 !== _attr
            }
        })
    }

    function layout(mode)
    {
        if (self == top) return;
        mode = void 0 !== mode ? mode : 0;
        let _mode_hotspots = !1,
            _mode_notes = !1,
            _mode_scale = 1,
            _mode_console = !1,
            _mode_sitemap = !1,
            _mode_minimal = !1,
            _mode_website = !0;
        setTimeout(() =>
        {
            let shell = window.parent.document,
                hash = shell.location.hash;
            mode > 0 && (hash.indexOf("&fn=0") < 0 && $(shell).find("#showNotesOption").click(), hash.indexOf("&hi=1") > -1 && $(shell).find("#showHotspotsOption").click()), 0 === mode ? ($(shell).find("#maximizePanelContainer").show(), $(shell).find('.vpScaleOption[val="0"]').click()) : 1 === mode ? ($(shell).find('.vpScaleOption[val="0"]').click(), $(shell).find("#interfaceControlFrameMinimizeContainer").click(), $(shell).find("#maximizePanelContainer").hide()) : 2 === mode ? ($(shell).find('.vpScaleOption[val="1"]').click(), $(shell).find("#interfaceControlFrameMinimizeContainer").click(), $(shell).find("#maximizePanelContainer").hide()) : 3 === mode && ($(shell).find('.vpScaleOption[val="2"]').click(), $(shell).find("#interfaceControlFrameMinimizeContainer").click(), $(shell).find("#maximizePanelContainer").hide())
        }, 0)
    }

    function jsonbin(options)
    {
        let This = this,
            fn = function() {},
            host = "https://api.jsonbin.io/v3",
            {
                binId: binId,
                binName: binName,
                collectionId: collectionId,
                collectionName: collectionName,
                collectionSort: collectionSort = "desc",
                apiKey: apiKey,
                useVersion: useVersion = !1,
                isPrivate: isPrivate = !1
            } = options;
        return This.binId = binId,
        {
            create: callback =>
            {
                if (This.binId) return void callback(This.binId);
                let data = {
                    axure: "axlib"
                };
                $.ajax(
                {
                    url: `${host}/b`,
                    data: JSON.stringify(
                    {
                        data: data
                    }),
                    type: "POST",
                    beforeSend: function(req)
                    {
                        req.setRequestHeader("Content-Type", "application/json"), req.setRequestHeader("X-Bin-Private", isPrivate), req.setRequestHeader("X-Master-Key", apiKey), binName && req.setRequestHeader("X-Bin-Name", binName), collectionId && req.setRequestHeader("X-Collection-Id", collectionId)
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: callback || fn,
                    error: err =>
                    {
                        console.log(err)
                    }
                })
            },
            read: (arg1, arg2) =>
            {
                let callback, path;
                void 0 !== arg1 && void 0 === arg2 ? callback = arg1 : void 0 !== arg1 && void 0 !== arg2 ? (path = arg1, callback = arg2) : void 0 === arg1 && void 0 === arg2 && (callback = fn), $.ajax(
                {
                    url: `${host}/b/${This.binId}/latest`,
                    type: "GET",
                    beforeSend: function(req)
                    {
                        path && req.setRequestHeader("X-Dot-Path", path), apiKey && req.setRequestHeader("X-Master-Key", apiKey)
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: callback,
                    error: err =>
                    {
                        console.log(err)
                    }
                })
            },
            update: (data, callback) =>
            {
                $.ajax(
                {
                    url: `${host}/b/${This.binId}`,
                    data: JSON.stringify(
                    {
                        data: data
                    }),
                    type: "PUT",
                    beforeSend: function(req)
                    {
                        req.setRequestHeader("X-Bin-Meta", !0), req.setRequestHeader("X-Bin-Versioning", useVersion), apiKey && req.setRequestHeader("X-Master-Key", apiKey)
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: callback || fn,
                    error: err =>
                    {
                        console.log(err)
                    }
                })
            },
            del: callback =>
            {
                $.ajax(
                {
                    url: `${host}/b/${This.binId}`,
                    type: "DELETE",
                    beforeSend: function(req)
                    {
                        apiKey && req.setRequestHeader("X-Master-Key", apiKey)
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: callback || fn,
                    error: err =>
                    {
                        console.log(err)
                    }
                })
            },
            collection: callback =>
            {
                $.ajax(
                {
                    url: `${host}/c`,
                    type: "POST",
                    beforeSend: function(req)
                    {
                        apiKey && req.setRequestHeader("X-Master-Key", apiKey), collectionName && req.setRequestHeader("X-Collection-Name", collectionName)
                    },
                    success: callback,
                    error: err =>
                    {
                        console.log(err)
                    }
                })
            },
            list: callback =>
            {
                let sort = collectionSort || "desc";
                $.ajax(
                {
                    url: `${host}/c/${collectionId}/bins`,
                    type: "GET",
                    beforeSend: function(req)
                    {
                        req.setRequestHeader("X-Sort-Order", sort), apiKey && req.setRequestHeader("X-Master-Key", apiKey)
                    },
                    dataType: "json",
                    success: callback || fn,
                    error: err =>
                    {
                        console.log(err)
                    }
                })
            },
            help: () =>
            {
                let msg;
                trace(["# 初始化", "let bin = new axlib.jsonbin({ binId, binName, collectionId, collectionName, apiKey, userVersion, isPrivate });\n", "# 创建 Collection", "bin.collection(callback); // apiKey & collectionName is required.\n", "# 枚举 Collection 内的 bin", "bin.list(callback); // apiKey is required, collectionSoft is optional.\n", "# 创建 bin", "bin.create(callback); // apiKey, isPrivate is required, binName, collectionId is optional.\n", "# 读取 bin", "bin.read(path, callback); // path, callback, apiKey is optional.\n", "# 更新 bin", "bin.update(data, callback); // data is required, useVersion, apiKey is optional.\n", "# 删除 bin", "bin.del(callback); // apiKey is required.\n"].join("\n"))
            }
        }
    }

    function loading(container, show, options)
    {
        void 0 === show && (show = !0);
        let display = show ? "block" : "none",
            svg = `\n        <svg xmlns="http://www.w3.org/2000/svg" width="38" height="38" viewBox="0 0 38 38" stroke="${(options=options||{color:"#fff",opacity:.2,scale:1.2,delay:0,dur:1,blending:"difference"}).color}" style="transform:scale(${options.scale});">\n            <g fill="none" fill-rule="evenodd">\n                <g transform="translate(1 1)" stroke-width="2">\n                    <circle stroke-opacity="${options.opacity}" cx="18" cy="18" r="18"/>\n                    <path d="M36 18c0-9.94-8.06-18-18-18">\n                        <animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="${options.dur}s" repeatCount="indefinite"/>\n                    </path>\n                </g>\n            </g>\n        </svg>\n    `;
        return svg = svg.minify(), window.$axure.loadingCSSRulesInited || ($("head").append(`\n          <style>\n              html, body { height: 100%; }\n              .ax-loading { display:${display}; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: transparent; z-index: 99999; mix-blend-mode:${options.blending}; pointer-events:none; }\n              .ax-loading-svg { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }\n          </style>\n      `), window.$axure.loadingCSSRulesInited = !0), 0 === $(container).children(".ax-loading").length && $(container).append(`<div class="ax-loading"><div class="ax-loading-svg">${svg}</div></div>`), $(container).children(".ax-loading").get(0)
    }

    function trace()
    {
        console.group("%cAXLIB", "color:#fff; font-weight:bold; background:#08f; padding:4px 8px; border-radius:3px;"), console.log(...arguments), console.groupEnd()
    }

    function hosting(cloud)
    {
        if ("axhub" == (cloud = cloud || "axhub"))
        {
            let btnUpload = $("#axhub-rp9-root a i", top.document);
            0 === btnUpload.length ? trace("无法同步，你需要先为浏览器安装axhub插件！") : btnUpload.click()
        }
    }

    function find()
    {
        let args = [...arguments],
            obj = {};
        for (let i = 0; i < args.length; i++)
        {
            let name = args[i],
                el = $axure("@" + name);
            el.$().length > 0 && (obj[name] = el)
        }
        return obj
    }

    function useLoader(callback)
    {
        let axloaderURL;
        loadJS($axure.setGlobalVariable("AxLoader") || "https://ax.minicg.com/axloader.js", callback)
    }

    function loadJS(url, callback)
    {
        var s = document.createElement("script");
        s.onload = callback || function()
        {
            console.log(url + " loaded.")
        }, s.setAttribute("src", url), document.querySelector("head").appendChild(s)
    }

    function tree(_data)
    {
        let scanArr = [],
            scanObj = [],
            maxLevel = _data.length > 0 ? Object.keys(_data[0]).length : 0;
        const unique = function(arr, obj)
        {
            let _arr = [],
                _obj = [];
            for (let i = 0; i < arr.length; i++) _arr.includes(arr[i]) || (_arr.push(arr[i]), _obj.push(obj[i]));
            return [_arr, _obj]
        };
        for (let i = 0; i < maxLevel; i++)
        {
            let cid = `c${i+1}`,
                arr = [],
                obj = [];
            for (let k in _data)
            {
                let item = _data[k];
                arr.push(item[cid]), obj.push(
                {
                    value: item[cid],
                    label: item[cid],
                    parent: item[`c${i}`],
                    children: []
                })
            }
            scanArr[i] = unique(arr, obj)[0], scanObj[i] = unique(arr, obj)[1]
        }
        let len = scanObj.length;
        for (let i = 0; i < len; i++)
        {
            let curIdx, nextIdx = len - i - 2,
                curItem = scanObj[len - i - 1],
                nextItem = scanObj[nextIdx];
            for (let k in curItem)
            {
                let _current = curItem[k];
                for (let n in nextItem)
                {
                    let _next = nextItem[n];
                    _current.parent == _next.value && _next.children.push(_current)
                }
            }
        }
        for (let t = 0; t < scanObj[0].length; t++) delete scanObj[0][t].parent;
        return scanObj[0]
    }
    main()
}();